mysql不走索引情况
1、设计隐式转化，比如对int类型用like。like只能用于匹配字符串，like用xxx%
int类型会转化为字符类型然后再匹配。
解决：要么改变原字段类型，要么冗余一个字符串类型字段
2、like查询时，不满足最左匹配原则。即再有索引的列上使用%xxx
解决：看看能不能使用xxx%满足最左匹配；如果不行数据量不大时直接使用。数据量大时可以考虑mysql全文索引(能优化近50%，120w数据)，
如果还是达不到性能要求，直接上全文检索
一般这个用到在名称类似的字段上，需要加上全文索引，注意在非高峰是作用，会锁表（MDL元数据锁，会在对表结构在进行增删改时加上）
create fulltext index fullindex_school_code on t_physical_data_37(school_code)
3、 !=, <>两种不等于，需要mysql优化器判断，如果全表扫描效率更高，则会舍弃索引
4、对索引条件做计算或者是函数操作不走索引
5、is null 或者is not null操作，需要mysql优化器判断，如果全表扫描效率更高，则会舍弃索引。只针对二级索引
6、>,>=,<,<=索引不一定走索引，需要mysql优化器判断，如果全表扫描效率更高，则会舍弃索引
7、or语句的两侧都没有索引。即使两边都有索引也和数据量有关系，需要mysql优化器判断，如果全表扫描效率更高，则会舍弃索引
8、需要mysql优化器判断，如果全表扫描效率更高，则会舍弃索引
9、in 走不走索引要看扫描数据量。需要mysql优化器判断，如果全表扫描效率更高，则会舍弃索引
如果in只有一个数据，会走索引。其他情况并没有说30%扫描走索引。如果用到覆盖索引会走索引
可以用join优化in--》inner join

1、查询条件没有索引
2、索引列参与运算、函数操作
3、隐式转化，小数与int比较
4、不符合最左匹配原则
5、or两侧不都是带索引列
可能不走的：
1、is null 或者is not null；
对于非空字段索引，is null直接返回空，is not null全表扫描
对于可空字段索引，is null 和 is not null 要分情况
如果表有100条数据，10行空，90行有值，全表扫描100行
is null 走索引的话是，二级索引10行+回表10行 即20行，会走索引
is not null,走索引的话是，二级索引90行+回表90行 即180行，不会走索引。
可以看出是根据mysql查询优化器有关，判断扫描行数，来决定。
如果能用到覆盖索引，不走回表，则会用到索引
2、!= 和 <> (limit优化会走索引)
如果能用到覆盖索引，不走回表，则会用到索引。
如果不能用到覆盖索引，则需要全表扫描
3、in 和 not in (limit优化会走索引)
in 走索引会优化为范围查询
值只有一个 即in(x)走索引，如果in的值有多个
如果能用到覆盖索引，不走回表，则会用到索引
如果不能用到覆盖索引，则需要全表扫描
not in 走索引会优化为范围查询
如果能用到覆盖索引，不走回表，则会用到索引
如果不能用到覆盖索引，则需要全表扫描
or 走索引会优化为范围查询 (limit优化会走索引)
如果能用到覆盖索引，不走回表，则会用到索引
如果不能用到覆盖索引，则需要全表扫描
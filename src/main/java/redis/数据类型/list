list类型底层数据结构：
REDIS_ENCODING_ZIPLIST  使用ziplist压缩表作为列表对象的底层实现（3.2之前）
REDIS_ENCODING_LINKEDLIST 使用linkedlist链表作为列表对象的底层实现（3.2之前）
REDIS_ENCODING_QUICKLIST 使用quicklist作为列表对象的底层实现（3.2之后）



list类型，对应的redisObject对象表示为
type REDIS_LIST
encoding 可以为 ziplist linkedlist（3.2之前）quicklist（3.2之后）

决定encoding条件：
列表对象保存字符串都小于64，数量小于512使用ziplist（3.2之前）
不满足以上两个条件的使用使用linkedlist（3.2之前）
list底层实现都是使用quicklist（3.2之后）

ziplist：https://zhuanlan.zhihu.com/p/157553441
ziplist 是为了节省内存而设计出来的一种顺序型数据结构
包含多个节点，每个节点可以是一个字节数组或者整数
添加或者删除节点可能会发生连锁更新，但是几率并不高
（原因是每个节点都存储这上一个节点的字节长度prev_entry_len，这个长度保存字段prev_entry_len只能是1字节或者5字节，当前一个节点存储的数据过大或过小，导致本节点的prev_entry_len值
由1->5或者5->1会重新分配内存 250-253）
为了节省内存，查询性能并不高（涉及到计算，只能通过遍历查询）

linkedlist：
双向链表内存连续

quicklist：
底层用linkedlist+ziplist，其中每个节点都是一个ziplist的双向链表


命令（官网）：
LPUSH key element [element ...] 1.0.0， 2.4.0可批量
为key在头部添加元素，不存在key时创建列表，可批量

LPUSHX key element [element ...] 2.2.0，4.0.0可批量
当key存在且为列表时，从头部添加（批量添加）元素

RPUSH key element [element ...] 1.0.0， 2.4.0可批量
为key在尾部添加元素，不存在key时创建列表，可批量

RPUSHX key element [element ...] 2.2.0，4.0.0可批量
当key存在且为列表时，从尾部添加（批量添加）元素

LINSERT key BEFORE | AFTER pivot element  2.2.0
在key的某个元素（pivot）之前或之后插入一个值（element）；列表中有多个元素怎么办？只插入一个，第一个遇到的

LPOP key [count] 1.0.0 ，6.2.0添加count参数
删除并返回key的头结点。count有值时，删除多个并返回

BLPOP key [key ...] timeout 2.0.0 ， 6.0.0添加timeout参数，表示双精度
删除并返回key的头结点。支持监听多个key.如果key对应的列表为空则阻塞。先阻塞先解除阻塞

RPOP key [count] 1.0.0 ，6.2.0添加count参数
删除并返回key的尾结点。count有值时，删除多个并返回

RLPOP key [key ...] timeout 2.0.0 ， 6.0.0添加timeout参数，表示双精度
删除并返回key的尾结点。支持监听多个key.如果key对应的列表为空则阻塞。先阻塞先解除阻塞

LMOVE source destination LEFT | RIGHT LEFT | RIGHT  6.2.0
从源（source）到目标（destination）移动数据，前一个LEFT|RIGHT 表示从目标的头或尾移出，后一个LEFT|RIGHT 表示从头或尾插入

BLMOVE source destination LEFT | RIGHT LEFT | RIGHT timeout  6.2.0
和LMOVE类似。在source为空时会阻塞，等待timeout时间。

LREM key count element
删除key的几个(count)等于element的元素。count>0从头开始删，count<0从尾开始删，count=0删除所有



场景：
缓存：string 最常用的就是缓存功能，会将一些更新不频繁但是查询频繁的数据缓存起来，以此来减轻 DB 的压力。
计数器：可以用来计数，通过 incr 操作，如统计网站的访问量、文章访问量等。
